// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package users

import (
	"context"
)

const getByEmail = `-- name: GetByEmail :one

SELECT
    id, first_name, surname, last_name, email, phone_number, password_hash, company_name, company_inn, company_address, position_in_company
FROM
    users u
WHERE
    u.email = ?1
`

func (q *Queries) GetByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Surname,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.CompanyName,
		&i.CompanyInn,
		&i.CompanyAddress,
		&i.PositionInCompany,
	)
	return i, err
}

const insertNew = `-- name: InsertNew :exec

INSERT INTO users (
    email,
    password_hash,
    first_name,
    surname,
    last_name,
    phone_number
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6
)
`

type InsertNewParams struct {
	Email        string
	PasswordHash string
	FirstName    string
	Surname      string
	LastName     string
	PhoneNumber  string
}

func (q *Queries) InsertNew(ctx context.Context, arg InsertNewParams) error {
	_, err := q.db.ExecContext(ctx, insertNew,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.Surname,
		arg.LastName,
		arg.PhoneNumber,
	)
	return err
}

const updateCompanyData = `-- name: UpdateCompanyData :exec

UPDATE users
SET
    company_name = company_name,
    company_inn = company_inn,
    company_address = company_address,
    position_in_company = position_in_company
WHERE
    id = ?1
`

func (q *Queries) UpdateCompanyData(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateCompanyData, id)
	return err
}

const updateData = `-- name: UpdateData :exec

UPDATE users
SET
    first_name = ?1,
    surname = ?2,
    last_name = ?3,
    phone_number = ?4
WHERE
    id = ?5
`

type UpdateDataParams struct {
	FirstName   string
	Surname     string
	LastName    string
	PhoneNumber string
	ID          int64
}

func (q *Queries) UpdateData(ctx context.Context, arg UpdateDataParams) error {
	_, err := q.db.ExecContext(ctx, updateData,
		arg.FirstName,
		arg.Surname,
		arg.LastName,
		arg.PhoneNumber,
		arg.ID,
	)
	return err
}

const updateEmail = `-- name: UpdateEmail :exec

UPDATE users
SET
    email = ?1
WHERE
    id = ?2
`

type UpdateEmailParams struct {
	Email string
	ID    int64
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail, arg.Email, arg.ID)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec

UPDATE users
SET
    password_hash = ?1
WHERE
    id = ?2
`

type UpdatePasswordParams struct {
	PasswordHash string
	ID           int64
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.PasswordHash, arg.ID)
	return err
}
