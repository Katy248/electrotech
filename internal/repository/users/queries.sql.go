// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package users

import (
	"context"
	"database/sql"
)

const getByEmail = `-- name: GetByEmail :one

SELECT
    id, first_name, surname, last_name, email, phone_number, password_hash, company_name, company_inn, company_address, position_in_company
FROM
    users u
WHERE
    u.email = ?1
`

func (q *Queries) GetByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Surname,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.CompanyName,
		&i.CompanyInn,
		&i.CompanyAddress,
		&i.PositionInCompany,
	)
	return i, err
}

const getById = `-- name: GetById :one

SELECT
    id, first_name, surname, last_name, email, phone_number, password_hash, company_name, company_inn, company_address, position_in_company
FROM
    users u
WHERE
    u.id = ?1
`

func (q *Queries) GetById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Surname,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.CompanyName,
		&i.CompanyInn,
		&i.CompanyAddress,
		&i.PositionInCompany,
	)
	return i, err
}

const getCompanyData = `-- name: GetCompanyData :one

SELECT
    company_name,
    company_inn,
    company_address,
    position_in_company
FROM
    users
WHERE
    email = ?1
`

type GetCompanyDataRow struct {
	CompanyName       sql.NullString
	CompanyInn        sql.NullString
	CompanyAddress    sql.NullString
	PositionInCompany sql.NullString
}

func (q *Queries) GetCompanyData(ctx context.Context, email string) (GetCompanyDataRow, error) {
	row := q.db.QueryRowContext(ctx, getCompanyData, email)
	var i GetCompanyDataRow
	err := row.Scan(
		&i.CompanyName,
		&i.CompanyInn,
		&i.CompanyAddress,
		&i.PositionInCompany,
	)
	return i, err
}

const insertNew = `-- name: InsertNew :exec

INSERT INTO users (
    email,
    password_hash,
    first_name,
    surname,
    last_name,
    phone_number
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6
)
`

type InsertNewParams struct {
	Email        string
	PasswordHash string
	FirstName    string
	Surname      string
	LastName     string
	PhoneNumber  string
}

func (q *Queries) InsertNew(ctx context.Context, arg InsertNewParams) error {
	_, err := q.db.ExecContext(ctx, insertNew,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.Surname,
		arg.LastName,
		arg.PhoneNumber,
	)
	return err
}

const updateCompanyData = `-- name: UpdateCompanyData :exec

UPDATE users
SET
    company_name = ?1,
    company_inn = ?2,
    company_address = ?3,
    position_in_company = ?4
WHERE
    email = ?5
`

type UpdateCompanyDataParams struct {
	CompanyName       sql.NullString
	CompanyInn        sql.NullString
	CompanyAddress    sql.NullString
	PositionInCompany sql.NullString
	Email             string
}

func (q *Queries) UpdateCompanyData(ctx context.Context, arg UpdateCompanyDataParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyData,
		arg.CompanyName,
		arg.CompanyInn,
		arg.CompanyAddress,
		arg.PositionInCompany,
		arg.Email,
	)
	return err
}

const updateData = `-- name: UpdateData :exec

UPDATE users
SET
    first_name = ?1,
    surname = ?2,
    last_name = ?3
WHERE
    email = ?4
`

type UpdateDataParams struct {
	FirstName string
	Surname   string
	LastName  string
	Email     string
}

func (q *Queries) UpdateData(ctx context.Context, arg UpdateDataParams) error {
	_, err := q.db.ExecContext(ctx, updateData,
		arg.FirstName,
		arg.Surname,
		arg.LastName,
		arg.Email,
	)
	return err
}

const updateEmail = `-- name: UpdateEmail :exec

UPDATE users
SET
    email = ?1
WHERE
    id = ?2
`

type UpdateEmailParams struct {
	Email string
	ID    int64
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail, arg.Email, arg.ID)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec

UPDATE users
SET
    password_hash = ?1
WHERE
    email = ?2
`

type UpdatePasswordParams struct {
	PasswordHash string
	Email        string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.PasswordHash, arg.Email)
	return err
}

const updatePhoneNumber = `-- name: UpdatePhoneNumber :exec

UPDATE users
SET
    phone_number = ?1
WHERE
    email = ?2
`

type UpdatePhoneNumberParams struct {
	PhoneNumber string
	Email       string
}

func (q *Queries) UpdatePhoneNumber(ctx context.Context, arg UpdatePhoneNumberParams) error {
	_, err := q.db.ExecContext(ctx, updatePhoneNumber, arg.PhoneNumber, arg.Email)
	return err
}
