// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package repository

import (
	"context"
)

const getUserByEmail = `-- name: GetUserByEmail :one

SELECT
    id, first_name, surname, last_name, email, password_hash, company_name, company_inn, position_in_company
FROM
    users u
WHERE
    u.email = ?1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Surname,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.CompanyName,
		&i.CompanyInn,
		&i.PositionInCompany,
	)
	return i, err
}

const getUserOrders = `-- name: GetUserOrders :many
;


SELECT id, user_id, creation_date, total_price 
FROM orders o 
WHERE o.user_id = ?1
LIMIT 40 * ?2, 40
`

type GetUserOrdersParams struct {
	UserId int64
	Page   interface{}
}

func (q *Queries) GetUserOrders(ctx context.Context, arg GetUserOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getUserOrders, arg.UserId, arg.Page)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreationDate,
			&i.TotalPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNewUser = `-- name: InsertNewUser :exec
;
    

INSERT INTO users (
    email,
    password_hash,
    first_name,
    surname,
    last_name
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5
)
`

type InsertNewUserParams struct {
	Email        string
	PasswordHash string
	FirstName    string
	Surname      string
	LastName     string
}

func (q *Queries) InsertNewUser(ctx context.Context, arg InsertNewUserParams) error {
	_, err := q.db.ExecContext(ctx, insertNewUser,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.Surname,
		arg.LastName,
	)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec

UPDATE users
SET
    email = ?1
WHERE
    id = ?2
`

type UpdateUserEmailParams struct {
	Email string
	ID    int64
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmail, arg.Email, arg.ID)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
;


UPDATE users
SET
    password_hash = ?1
WHERE
    id = ?2
`

type UpdateUserPasswordParams struct {
	PasswordHash string
	ID           int64
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.PasswordHash, arg.ID)
	return err
}
