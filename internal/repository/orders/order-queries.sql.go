// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order-queries.sql

package orders

import (
	"context"
	"database/sql"
)

const addOrderProduct = `-- name: AddOrderProduct :exec

INSERT INTO order_products (order_id, product_name, quantity, product_price) 
VALUES (?1, ?2, ?3, ?4)
`

type AddOrderProductParams struct {
	OrderId     sql.NullInt64
	ProductName string
	Quantity    int64
	Price       float64
}

func (q *Queries) AddOrderProduct(ctx context.Context, arg AddOrderProductParams) error {
	_, err := q.db.ExecContext(ctx, addOrderProduct,
		arg.OrderId,
		arg.ProductName,
		arg.Quantity,
		arg.Price,
	)
	return err
}

const insertOrder = `-- name: InsertOrder :one

INSERT INTO orders (user_id, total_price) 
VALUES (?1, ?2)
RETURNING id, user_id, creation_date, total_price
`

type InsertOrderParams struct {
	UserId     int64
	TotalPrice float64
}

func (q *Queries) InsertOrder(ctx context.Context, arg InsertOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, insertOrder, arg.UserId, arg.TotalPrice)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreationDate,
		&i.TotalPrice,
	)
	return i, err
}
